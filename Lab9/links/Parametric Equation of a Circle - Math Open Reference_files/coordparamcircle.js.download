 var origin=new GeomPoint(250,165, INVISIBLE, NON_DRAGGABLE ); var plane=new CoordPlane(appletWidth, appletHeight-29, origin); var p=new CoordPoint(plane.getX(52), plane.getY(7), plane, "P"); var c=new CoordPoint(0,0, plane, "C"); var q=new LabeledPoint(0,0, INVISIBLE, NON_DRAGGABLE, "Q"); var a=new GeomPoint(0,0); var radius; var ang; var thet=new AngleWhole(a,c,p); var xLabel=new TextObj(0,0,"x"); var yLabel=new TextObj(0,0,"y"); var rLen=new Length(c,p);  var drawArea; var triangle=new Sprite(); var e1,e2,e3,e4; var oR={val:66, decPlaces:1}; var oH={val:11, decPlaces:0}; var oK={val:22, decPlaces:0}; function build() { graphics.clear();  addCommands([resetCmd , printCmd, fullCmd, showCmd]); showGrid=new MenuItem("Show grid", false, true, update); showTriangle=new MenuItem("Show triangle", true, true, update); freezeRadius=new MenuItem("Freeze radius", true, true, update); plane.showGrid=showGrid.selected; plane.showCoords=true; plane.update(); addChild(plane);  drawArea=new Sprite(); addChild(drawArea);  addChild(origin); with(drawArea) { addChild(triangle); addChild(xLabel); addChild(yLabel); addChild(rLen); addChild(thet); addChild(p); addChild(c); addChild(q); } e1=new Formula("x= $oR @sp @cos t", bScale, "formulaRight"); e1.container.style.fontSize="16px"; appendToBody(e1.container); e2=new Formula("y= $oR @sp @sin t", bScale, "formulaRight"); e2.container.style.top="2.4em"; e2.container.style.fontSize="16px"; appendToBody(e2.container); e3=new Formula("x= $oH + $oR @sp @cos t", bScale, "formulaRight"); e3.container.style.fontSize="16px"; appendToBody(e3.container); e4=new Formula("y= $oK + $oR @sp @sin t", bScale, "formulaRight"); e4.container.style.top="2.4em"; e4.container.style.fontSize="16px"; appendToBody(e4.container);  animation="introPause"; CoordPoint.pnum=0; plane.update();  hint=new Hint(p, Hint.RIGHT, "Drag");  addChild(hint);   startTicking(1, animate);  setInitVals(); setPLocation(); update(); } function setInitVals() { ang=0.7; radius=20*plane.getScaleFactor(); c.x=origin.x; c.y=origin.y; showGrid.setSelected(false); showTriangle.setSelected(true); freezeRadius.setSelected(true); } function update(e) { plane.showGrid=showGrid.selected; plane.showPointers=false; plane.showTics=showGrid.selected; plane.update(); c.update(); drawCircle(); setPLocation(); p.showCoords=showingDetails; p.update(); with(q) { x=p.x, y=c.y; nonDragAlpha=0;  update(); } with(a) { x=c.x + 60; y=c.y; update(); } with(rLen) { scale=plane.getScaleFactor(); update(); } with(xLabel) { x=(p.x>c.x)? c.x + (q.x-c.x)/2 - 24 : q.x + (c.x-q.x)/2 - 24; y=(p.y<c.y)? c.y - 2 : c.y-18; text=rLen.len() + " cos" + thet.getDegrees() + "\u00B0"; visible=showTriangle.selected && showingDetails; update(); } with(yLabel) { text=rLen.len()+" sin" + thet.getDegrees() + "\u00B0"; update(); x=(p.x > c.x)? p.x+3 : p.x-(getWidth())-5; y=(p.y > c.y)? c.y + (p.y-c.y)/2 -10 : c.y-(c.y-p.y)/2 - 10; visible=showTriangle.selected && showingDetails; update(); } with(thet) { visible=showingDetails; update(); } switch(plane.getQuadrant(p,c)) { case 1: c.labelQuadrant=3; p.labelQuadrant=1; break; case 2: c.labelQuadrant=4; p.labelQuadrant=2; break; case 3: c.labelQuadrant=4; p.labelQuadrant=3; break; case 4: c.labelQuadrant=3; p.labelQuadrant=4; break; } c.showCoords=(c.x!=origin.x || c.y!=origin.y); c.update(); p.update(); drawTriangle(); oR.val=rLen.len(); oH.val=c.getXCoordAsDisplayed(); oK.val=c.getYCoordAsDisplayed();  e3.visible=e4.visible=(oH.val !=0 || oK.val !=0) && showingDetails; e1.visible=e2.visible=(!e3.visible && showingDetails); e1.update(); e2.update(); e3.update(); e4.update(); repaint(); } function reset() { setInitVals(); update(); } function setPLocation() { p.x=c.x + radius*Math.cos(ang); p.y=c.y - radius*Math.sin(ang); } function pointMoved(e) { if(pointBeingMoved==p) {  ang=c.theta(p); if(!freezeRadius.selected) { radius=c.distance(p); } } if(pointBeingMoved==c) { if(c.distance(origin) < 3)  { c.x=origin.x; c.y=origin.y; } } update(); } function drawCircle() { with(drawArea.graphics) { clear(); lineStyle(1); beginFill(0xffff00, 0.2); drawCircle(c.x, c.y, radius); endFill(); } } function drawTriangle() { with(triangle.graphics) { clear(); if(showTriangle.selected && showingDetails) { lineStyle(1); beginFill(0xFFB6C1, 0.5); moveTo(c.x, c.y); lineTo(p.x, p.y); lineTo(p.x, c.y); lineTo(c.x, c.y); endFill(); if(p.x<c.x && c.y !=origin.y)  { moveTo(c.x, c.y); lineTo(a.x, a.y); } } else  { lineStyle(1); moveTo(c.x, c.y); lineTo(p.x, p.y); } } } function animStart()  { } function animStop()  { } var initVal; var tgtVal; var delta=6; var mover=p; function animate(event)  { switch(animation) { case "introPause": if(timeElapsed(500)) { animation="intro"; initVal=mover.x; tgtVal=mover.x-140; } break; case "intro": mover.x -=delta; movePoint(mover); if(mover.x <=tgtVal) { animation="intro2a"; } break; case "intro2a": if(timeElapsed(700)) { animation="intro2"; } break; case "intro2": mover.x +=delta; movePoint(mover); if(mover.x >=initVal) { animation="hintPause"; } break; case "hintPause": if(timeElapsed(500)) { animation="introdone"; Hint.show(); reset();   } break; default: break; } } startApplet();